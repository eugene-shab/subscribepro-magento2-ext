<?php
/** @var $block Swarming\SubscribePro\Block\Customer\Widget\Address */
/** @var $escaper \Magento\Framework\Escaper */
?>
<?php if ($block->isAddressBookEnabled()): ?>
<?php
$addressWidgetUrl = $block->getAddressWidgetUrl();
$addressWidgetJson = $block->getAddressWidgetJson();
$currentAddress = $block->getCurrentAddress();
$defaultBillingAddress = $block->getCustomerDefaultBillingAddress();
?>
<script src="<?php echo $escaper->escapeUrl($addressWidgetUrl); ?>"></script>
<script>
let widgetConfig = <?php echo $addressWidgetJson; ?>;

require([
    'jquery',
], function($){
    let formContainer = $('form#form-validate'),
        button = formContainer.find('.primary button.action.save.primary')
        isLoaded = false;

    formContainer.submit(function(e) {
        if (isLoaded) {
            return true;
        }
        e.stopImmediatePropagation();
        if (formContainer.validation() && formContainer.validation('isValid')) {
            let formData = formContainer.serializeArray(),
                dataObj = {},
                counter = 1,
                currentAddress = <?php echo json_encode($block->getCurrentAddress(), JSON_FORCE_OBJECT); ?>,
                defaultBillingAddress = <?php echo json_encode($defaultBillingAddress, JSON_FORCE_OBJECT); ?>;

            $(formData).each(function(i, field) {
                let fieldName = field.name;
                if (field.name  === 'street[]')  {
                    fieldName = 'street'+counter;
                    counter++;
                }
                dataObj[fieldName] = field.value;
            });

            let address = {
                "firstName": dataObj.firstname,
                "lastName": dataObj.lastname,
                "company": dataObj.company,
                "street1": dataObj.street1,
                "street2": dataObj.street2,
                "city": dataObj.city,
                "region": dataObj.region,
                "postcode": dataObj.postcode,
                "country": dataObj.country_id,
                "phone": dataObj.telephone
            };

            if (defaultBillingAddress.hasOwnProperty('id') && currentAddress.hasOwnProperty('id') && dataObj['default_billing'] === "1") {

                AddressBookAssist.onDefaultBillingChanged({
                    "previousDefaultAddress": defaultBillingAddress,
                    "newDefaultAddress": currentAddress
                })
                    .then(function (platformAddress) {

                    })
                    .catch((error) => {
                        console.error(error);
                    });
            } else {
                AddressBookAssist.onAddressCreated({"address": address})
                    .then(function (platformAddress) {
                        isLoaded = true;
                        $('<input />').attr('type', 'hidden')
                            .attr('name', 'platform_address_id')
                            .attr('value', platformAddress.id)
                            .appendTo('form#form-validate');

                        formContainer.submit();
                    })
                    .catch((error) => {
                        console.error(error);
                    });
            }

            return false;
        } else {
            console.log('Form not Valid');
        }

        return false;
    });

    let baseWidgetConfig = {
        apiAccessToken: "<?php echo $block->getWidgetAccessTokenForCurrentCustomer(); ?>",
        customerId: <?php echo $block->getPlatformCustomerId(); ?>
    };

    for (let key in baseWidgetConfig) {
        widgetConfig[key] = baseWidgetConfig[key];
    }
    AddressBookAssist.init(widgetConfig);
}, [
    'jquery',
]);
</script>
<div id="sp-address-book"></div>
<?php endif; ?>
